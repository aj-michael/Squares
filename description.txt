
all data is within structs, a struct is declared as so

[int, int] point

array notation may also be used, both of these are equivalent

int[2] point

the ints can be accessed like this

  point[0] = 5
  point[1] = 2

  print point

->[5, 2]

  point = [6, 2]

  print point

->[6, 2]

the ints can also be named as so

  [int x, int y] point
  point.x = 5
  point.y = 2
  print point

->[5, 2]

types can be declared using the isa keyword
they must start with a capital letter, unless
it is a primitive type

  Point isa [int x, int y]
  Point point
  point.x=1
  point.y=2
  print point

->[1, 2]

the type is equivalent to its struct signature

  print (Point == [int, int])

->true

  print (Point == int[2])

->true

Structs can be declared with structs

Triangle isa [Point,Point,Point]

  print (Triangle == [[int, int],[int, int],[int, int]])

->true


Variables can be used to represent a length when placed in array notation

  Shape isa [String name,Point[int numPoints] points]

  Triangle isa Shape as ['Triangle', Point[3]]

types can be compared with <, =, or >

// can a triangle always be a shape?
  print (Triangle < Shape)

->true

// can a Shape always be a Triangle?
  print (Triangle > Shape)

->false

// are Shapes and Triangles interchangeable?
  print (Triangle == Shape)

->false

  Triangle t
  t.points = [[1,2],[3,4],[0,0]]

  print t.numPoints

->3

  print t.name

->Triangle

 values set in the type declaration  cannot be overwritten

 t.name = 'square'

->Exception: attempt to write to read only variable: String Triangle.name

functions are declared like this:
  addPoints(Point a, Point b)=>Point C:
    c[0] = a[0] + b[0]
    c[1] = a[1] + b[1]

  println addPoints([5,2],[9,5])

->[14,7]

  notice how the structs are implicitly casted to points, this only works either if
  the type has a signature equal to that of the structs or if a cast function has been defined

  operators can be overloaded like this

  Point a + Point b => Point c:
    c[0] = a[0] + b[0]
    c[1] = a[1] + b[1]

  Point x = [1, 3]
  Point y = [5, 2]

  print (x + y)

->[6, 5]

we can make custom operators

  is Point x higher than Point y?=>bool x:
    x = x.y > y.y

  print (is [5,1] higher than [4, 2])?

->false

  within function calls, whitespace is ignored

  println is[10,3]higherthan[9,4]?

->true

  it is encourage, except in a few circumstances where spaces make code more readable
  that functions do not use white space like this due to the ambiguities they cause

  this presents a problem, what if I declare this function after?

  is Point x higher than Point y=>bool x
    println 'you forgot the question mark'

  println is [4,4] higher than [2,2]

->you forgot the question mark

larger names are given predence over shorter names 

  println (is [3,2] higher than [4,3])?

->false

the function can be retrieved from its signature

  Point,Point=>Point add = Point+Point=>Point

it is converted to generalized form, the arguments are in the same order though

  println add(x,y)

->[6, 5]

 function types have a type hierchy just like struct types

 println (Point,Point=>Point < [int,int],[int,int]=>[int,int])

->true

  generics are done with type constructors, remember types must be capitalized

  Map(type Key, type Value, Key=>int hash)=>type Map:
    Map isa [[Key key, Value value][int capacity] entries,int length, Key=>int hash]
    Map m.insert(Key key, Value value)=>bool success:
      if(m.capacity * 0.7 < length){
        m.capacity *= 2;
      }
      int index = m.hash(key) % m.capacity;
      while(entries[index] != key):
      ...  

  Map(type Key, type Value)=>type Map:
    Map = Map(Key,Value,Key.hash)

  Map(String, int, hash) map

types from the same type constructor are not always equal

  println (Map(String, int) == Map(String, String))

->false

blocks are declared with the colon like this

  Block b = : print 'this is in a block'

  print (b == void=>void)

->true

a block is equal to a function without parameters or resturn values
